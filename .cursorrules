# FrostByte Error Handling Rules

## Core Philosophy: Die Hard

**Never catch errors unless you can meaningfully handle them.** If something
goes wrong, fail fast and fail loud. The system should either work correctly or
stop immediately to alert the user.

## Rules

1. **No Generic Try-Catch Blocks**
   - DON'T wrap code in try-catch just to "handle" errors
   - DON'T log and continue when something fails
   - DO let errors bubble up to crash the process

2. **Exceptions to the Rule**
   - Network/RPC failures in retry loops: catch, log, and retry on next
     iteration
   - Resource cleanup: use try-finally if needed, but still throw the error
   - Graceful shutdown: catch signals to clean up, then exit with error code

3. **Plugin & Module Loading**
   - If a plugin fails to load, the entire system should crash
   - If initialization fails, don't try to continue with partial functionality
   - Configuration errors should be fatal

4. **Database Operations**
   - Never catch database errors in indexers
   - Let transaction failures bubble up to ensure consistency
   - If a query fails, the batch should fail

5. **Examples**

   ```typescript
   // BAD
   try {
       await loadPlugin(path);
   } catch (error) {
       console.error(`Failed to load plugin: ${error}`);
       // Continuing with broken state!
   }

   // GOOD
   await loadPlugin(path); // Crash if it fails

   // ACCEPTABLE (RPC retry loop)
   while (true) {
       try {
           const result = await rpc.call();
           return result;
       } catch (error) {
           console.error(`RPC failed, retrying in ${delay}ms:`, error);
           await sleep(delay);
           // This is OK because we're in a retry loop
       }
   }
   ```

## Rationale

- **Fail Fast**: Problems are caught immediately, not after corrupting state
- **Clear Errors**: Users know exactly what went wrong and where
- **No Silent Failures**: Nothing fails quietly and causes mysterious issues
  later
- **Data Integrity**: Database transactions either complete fully or not at all
- **Predictable Behavior**: The system is either working correctly or not
  working
